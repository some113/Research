package p2p;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Array;
import java.util.*;

import Config.Config;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.jobcontrol.ControlledJob;
import org.apache.hadoop.mapreduce.lib.jobcontrol.JobControl;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class P2PHostIdentify {

    private static int TEMP_FLOW_NUM = 50;
    //P2P host detection threshold for detecting P2P flows
    private static int p2PHostDetectionThreshold = Config.BGPSupport;
    //Byte per packet threshold for merging flows
    private static int bytePerPacketThreshold = Config.NumberOfByteThread;

    private static int NumberOfPacketThread = Config.NumberOfPacketThread;

    private static String P2PFlowFileName = Config.P2PFlowFileName;

    static HashMap<String, BufferedWriter> writerMap = new HashMap<String, BufferedWriter>(); //<prefix, writer>

    private static int T = Config.T;

    private static BufferedWriter writer = null;

    private static boolean isP2PFlow(Iterable<Text> values) {
        Set<String> dstSet = new HashSet<String>();

        for (Text val : values) {
            String[] parts = val.toString().split(",")[1].split("\\.");
            String prefix = parts[0] + "." + parts[1];

            if (!dstSet.contains(prefix)) {
                dstSet.add(prefix);
            }
            if (dstSet.size() >= p2PHostDetectionThreshold) {
                return true;
            }
        }

        return false;
    }

    private static boolean isManagementFlow(Text value) {
        String[] parts = value.toString().split(",");

        float bppout = Float.parseFloat(parts[2]);
        int totalPkts = Integer.parseInt(parts[3]);

        if (bppout > bytePerPacketThreshold || totalPkts < NumberOfPacketThread) return false;

        return true;
    }

    //Mapper class for P2P host detection Map-Reduce Module
    public static class P2PHostDetectionMapper extends Mapper<Object, Text, Text, Text> {
        /*
            Input format
            [srcAdd],[dstAdd],[proto],[time],[totalFwdPkts],[totalBwdPkts],[totalFwdBytes],[totalBwdBytes],[bppin],[bppout]
            + Output format
            [srcAdd] [time],[dstAdd],[bppout],[totalPkts],[totalBytes]

         */
        @Override
        protected void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            String[] parts = value.toString().split(",");

            String srcAdd = parts[0];
            String dstAdd = parts[1], proto = parts[2], time = parts[3], totalFwdPkts = parts[4],
                    totalBwdPkts = parts[5], totalFwdBytes = parts[6], totalBwdBytes = parts[7];
            Float bppout, bppin;
            if (parts.length < 10) { //Flow generated by argus
                bppout = totalFwdPkts == "0" ? 0 : Float.parseFloat(totalFwdBytes) / Integer.parseInt(totalFwdPkts);
                bppin = totalBwdBytes == "0" ? 0 : Float.parseFloat(totalBwdBytes) / Integer.parseInt(totalBwdPkts);
            } else {
                bppout = Float.parseFloat(parts[8]);
                bppin = Float.parseFloat(parts[9]);
            }



            try {
                if (bppout != 0) context.write(new Text(srcAdd), new Text(time + "," + dstAdd + "," + bppout +
                        "," + totalFwdPkts + "," + totalFwdBytes));
                if (bppin != 0) context.write(new Text(dstAdd), new Text(time + "," + srcAdd + "," + bppin +
                        "," + totalBwdPkts + "," + totalBwdBytes));
            } catch (Exception e) {
                System.out.println("Error when mapping data in sequence processing: " + e.getMessage());
                System.out.println("Parts value: " + Arrays.toString(parts) + "\n");
            }
        }
    }

    //Reducer class for P2P host detection Map-Reduce Module
    public static class P2PHostDetectionReducer extends Reducer<Text, Text, Text, Text> {

        /*  Filtering C-S host by number of BGP prefix
            Input format
            + [srcAdd] [time],[dstAdd],[bppout],[totalPkts],[totalBytes]
            Output format
            + [srcAdd] [time],[dstAdd],[bppout],[totalBytes]

         */
        @Override
        protected void reduce(Text key, Iterable<Text> values, Context context)
                throws IOException, InterruptedException {
            File dir = new File(System.getProperty("user.dir") + "/OutputData/Events/");
            BufferedWriter allWriter = null;

            if (!dir.exists()) {
                dir.mkdir();
            }

            if (!isP2PFlow(values)) return;

            String srcAdd = key.toString();

            dir = new File(System.getProperty("user.dir") + "/OutputData/Events/" + srcAdd + "/");
            dir.mkdir();

            for (Text val : values) {

                // TODO: take care of no flow cases
                String[] parts = val.toString().split(",");
//                if (parts.length < 2) {
//                    // TODO: Make fixed file print error
//                    continue;
//                }

                if (!isManagementFlow(val)) {
                    continue;
                }

                String dstAdd = parts[1];
                int time = Integer.parseInt(parts[0]), totalBytes = Integer.parseInt(parts[4]);
                float bppout = Float.parseFloat(parts[2]);

                if (!writerMap.containsKey("all" + srcAdd)) {
                    File file = new File(System.getProperty("user.dir") + "/OutputData/Events/" + srcAdd + "/all.txt");
                    writerMap.put("all" + srcAdd, new BufferedWriter(new FileWriter(
                            System.getProperty("user.dir") + "/OutputData/Events/" + srcAdd + "/all.txt", true)));
                }
//
                allWriter = writerMap.get("all" + srcAdd);

                allWriter.write(time + "," + dstAdd + "," + bppout + "," + totalBytes + "\n");
                allWriter.flush();
            }
//            if (writer != null) writer.flush();
            //writer.close();
        }
    }



    public static void run() throws IllegalArgumentException, IOException {

        //Create MAP-REDUCE job for detecting P2P flows.
//        BasicConfigurator.configure();
        JobConf conf = new JobConf(P2PHostIdentify.class);

        //FileModifier.deleteDir(new File(PeerCatcherConfigure.ROOT_LOCATION  + "/p2p_host_detection"));
        org.apache.commons.io.FileUtils.deleteDirectory(new File(System.getProperty("user.dir") +"/OutputData"));
        conf.setJobName("p2p_host_detection");

        Job jobP2PHostDetection = Job.getInstance();
        jobP2PHostDetection.setJobName("Job_p2p_host_detection_");
        jobP2PHostDetection.setJarByClass(P2PHostIdentify.class);
        jobP2PHostDetection.setMapperClass(P2PHostDetectionMapper.class);
        jobP2PHostDetection.setReducerClass(P2PHostDetectionReducer.class);
        jobP2PHostDetection.setOutputKeyClass(Text.class);
        jobP2PHostDetection.setOutputValueClass(Text.class);
        ControlledJob ctrlJobP2PHostDetection = new ControlledJob(conf);
        ctrlJobP2PHostDetection.setJob(jobP2PHostDetection);

        FileInputFormat.addInputPath(jobP2PHostDetection,
                new Path(System.getProperty("user.dir") +"/InputData/Flow"));
//        FileInputFormat.addInputPath(jobP2PHostDetection,
//                new Path(PeerCatcherConfigure.ROOT_LOCATION + "/INPUT/P2P"));
        FileOutputFormat.setOutputPath(jobP2PHostDetection,
                new Path(System.getProperty("user.dir") +"/OutputData"));
        // set the number of tasks for the reduce part of the job
        jobP2PHostDetection.setNumReduceTasks(5);

        // Run job
        JobControl jobCtrl = new JobControl("ctrl_p2p_host_detection");
        jobCtrl.addJob(ctrlJobP2PHostDetection);
        Thread t = new Thread(jobCtrl);
        t.start();

        while (true) {
            if (jobCtrl.allFinished()) {
                System.out.println(jobCtrl.getSuccessfulJobList());
                jobCtrl.stop();
                if (writer != null) {
                    writer.flush();
                    writer.close();
                }
                break;
            }
        }

        for (Map.Entry<String, BufferedWriter> entry : writerMap.entrySet()) {
            entry.getValue().close();
        }
    }

}
